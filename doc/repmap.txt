repmap.txt    repmap    Last change: January 26 2018
REPMAP - TABLE OF CONTENTS                                   *repmap* *repmap-toc*
==============================================================================

	 Todo

         align the tags

         Are you sure about the syntax highlighting?
         Sometimes, in Vim's help files, the backticks are used
         to surround function names. But here, you systematically
         use bars.
         Be consistent with Vim's default help files.

         document how to use `repmap#make#is_repeating()` to make `fFtT` repeatable


< Interface >_________________________________________________________________~

                                                             *repmap#make#all()*
repmap#make#all({what})

            Make the motions described in {what} repeatable.

            {what} is a dictionary containing 4 keys:

                    mode       the mode in which the motion is defined

                    buffer     a boolean flag; when on, the motion is local
                               to the current buffer

                    from       the filepath and the line address from which
                               the function is called

                               you can get it programmatically with: >

                                   expand('<sfile>:p')..':'..expand('<slnum>')
<
                               you  can  give  any  value,  including  an  empty
                               string;  it will  be  printed when  asking for  a
                               verbose listing of the database

                    motions    a list of motions

                               each item must be a dictionary containing
                               2 keys:

                                   bwd     key to press to move backwards

                                   fwd     key to press to move forwards

            Usage example: >

                    call repmap#make#all({
                        \ 'mode': '',
                        \ 'buffer': 0,
                        \ 'from': expand('<sfile>:p')..':'..expand('<slnum>'),
                        \ 'motions': [
                        \     {'bwd': '[M', 'fwd': ']M'},
                        \     {'bwd': '[m', 'fwd': ']m'},
                        \ ]})
<

                                                     *repeatable-motion-listing*
:RepeatableMotions

        Display all repeatable motions.

        Accepts the following arguments to limit the output to some motions:

                -mode
                -scope
                -v
                -vv


        -mode expects the mode of the motions: >

                :RepeatableMotions -mode normal
<
        Displays only motions defined in normal mode.


        -scope expects the scope of the motions (global or local): >

                :RepeatableMotions -scope local
<
        Displays only motions local to the current buffer.


        -v and -vv increase the verbosity of the output.
        -v will show from which file each original motion was installed.
        -vv will do the same, but will also show from which file the motion
        was made repeatable.


                                               *repeatable-motion-plug-mappings*

For every  pair of  keys that  you use to  repeat a  motion, |repmap#make#all()|
installs 2 <plug> mappings.  Example: >

    call repmap#make#all({
        \ 'mode': '',
        \ 'buffer': 0,
        \ 'from': expand('<sfile>:p')..':'..expand('<slnum>'),
        \ 'motions': [
        \     {'bwd': '[q', 'fwd': ']q'},
        \ ]})
<

< Purpose >___________________________________________________________________~
                                                   *repeatable-motion-purpose*


|repmap#make#all()| has 3 purposes:

    1. Install wrapper mappings around all pairs of motion mappings.
       The wrappers will be used to save and update the last motion.

    2. Install a pair of mappings to repeat this last saved motion.

    3. Add to the list [s:|b:]repeatable_motions a dictionary containing all
       the information relative to the original pair of motion mappings.

       This list is used as a database  by the wrappers to know what the motions
       are mapped to, and which keys to type.

       It is also used by |:RepeatableMotions|,  to get info about all motions
       currently repeatable.


< Terminology >_______________________________________________________________~

                                                 *repeatable-motion-terminology*

 database

         Dictionary |s:repeatable_motions| for global motions,
         or |b:repeatable_motions| for local motions.

         Contains the information relative to all repeatable motions.


 motion

         dictionary containing 2 keys:

             • bwd:     output of maparg('<left>') assuming <left> is
                        the backward motion

             • fwd:     same thing for <right> assuming it's
                        the forward motion


< Errors >____________________________________________________________________~
                                                    *repeatable-motion-errors*


                                        *E8000*

|repmap#make#all()| relies on some library functions from vim-lg-lib.
The latter is not currently installed.


                                        *E8001*

The dictionary argument  you passed to |repmap#make#all()|  should have included
the following keys:

    • buffer
    • from
    • mode
    • motions

At least one of them is missing.


                                        *E8002*

You asked for a  local motion to be made repeatable: the 2  {lhs} should be used
in local mappings.  But here, at least one of them is not.


                                        *E8003*

Either the motion you're trying to make repeatable (M), is already repeatable:

                               “total collision”

Or, a motion in a database of repeatable motions (global or local) has:

    • the same mode as (M)
    • the same scope as (M)
    • one of its {lhs} is identical to one of (M)

                              “partial collision”


< Miscellaneous >_____________________________________________________________~
                                              *repeatable-motion-miscellaneous*


                                         *repmap-1*
                                         *repeatable-motion-absolute-direction*

The key used to repeat a motion always moves the cursor in the same direction.
Example: >

    call repmap#make#all({
        \ 'mode': '',
        \ 'buffer': 0,
        \ 'from': expand('<sfile>:p')..':'..expand('<slnum>'),
        \ 'motions': [
        \     {'bwd': '[m', 'fwd': ']m'},
        \ ]})
<
After pressing  '[m'  ';' will still move the cursor to the NEXT start of a method.
In contrast, by default, after  'Fx'  ';' will move the cursor to the PREVIOUS 'x'.


                                               *repmap-2*
                                               *repeatable-motion-global-local*

You can ask to make a global motion repeatable or a local one (2 possibilities).
Besides, there can be (3 possibilities):

    • a global motion    using the same 2 {lhs}

    • a local motion     "

    • a local motion     using one, and only one, identical {lhs}

          its left  {lhs} is used  in a  local mapping, and  the right one  in a
          global mapping, or the reverse

That makes 6 possible combinations.  Here's what happens for each of them.
When you ask for:

    • a local motion, and it exists

              the motion is made repeatable

    • a global motion, and there's no shadowing local motion

              the motion is made repeatable

    • a global motion, and there's a shadowing local motion

            the motion is made repeatable
            the function will temporarily unshadow the global motion,
            so that |maparg()| can return the information about the latter

    • a local motion, but it doesn't exist, or only partially

            the function will bail out and raise |E8003| because
            it checks that both {lhs} are used in local mappings

    • a global motion, but one of its {lhs} is shadowed
      by a local motion

            the plugin will make the 2 global {lhs}
            repeatable (unshadowing one of them)

